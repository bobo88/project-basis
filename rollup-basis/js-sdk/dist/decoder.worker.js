function ceil(e){return Math.ceil(e)}function u(e,u){let i=0;for(var n=0;n<e;n++)i<<=1,u.data[Math.floor(u.index/8)]&128>>u.index%8&&(i+=1),u.index++;return i}function ue(e,u){let n=0;for(;e.index<8*u&&!(e.data[Math.floor(e.index/8)]&128>>e.index%8);)n++,e.index++;e.index++;let t=0;for(i=0;i<n;i++)t<<=1,e.data[Math.floor(e.index/8)]&128>>e.index%8&&(t+=1),e.index++;return(1<<n)-1+t}function se(e,u){e=ue(e,u);let i=ceil(e/2);return i=e%2==0?-i:i}function spsParser(t){var r=(t=t.slice(4)).length,a={data:t,index:0};u(1,a),u(2,a);let l;if(7==u(5,a)){t=u(8,a);u(1,a),u(1,a),u(1,a),u(1,a),u(1,a),u(1,a),u(2,a),u(8,a),ue(a,r);if(100==t|110==t||122==t||144==t){3==(l=ue(a,r))&&u(1,a),ue(a,r),ue(a,r),u(1,a);t=u(1,a);let e=new Uint8Array(8);if(t)for(var f=0;f<8;f++)e[f]=u(1,a)}ue(a,r);t=ue(a,r);if(0==t)log2_max_pic_order_cnt_lsb_minus4=ue(a,r);else if(1==t){u(1,a),se(a,r),se(a,r);var d=ue(a,r);let e=new Uint8Array[d];for(f=0;f<d;f++)e[f]=se(a,r)}ue(a,r),u(1,a);let i=16*(ue(a,r)+1),n=16*(ue(a,r)+1);t=u(1,a);t||u(1,a),u(1,a);if(u(1,a)){var o=ue(a,r),x=ue(a,r),c=ue(a,r),s=ue(a,r);let e=1,u=2-t;1==l?(e=2,u=2*(2-t)):2==l&&(e=2,u=2-t),i-=e*(o+x),n-=u*(c+s)}return{width:i,height:n}}}
var key,Module=void 0!==Module?Module:{},moduleOverrides={};for(key in Module)Module.hasOwnProperty(key)&&(moduleOverrides[key]=Module[key]);var arguments_=[],thisProgram="./this.program",quit_=function(e,t){throw t},ENVIRONMENT_IS_WEB=!1,ENVIRONMENT_IS_WORKER=!1,ENVIRONMENT_IS_NODE=!1,ENVIRONMENT_IS_SHELL=!1,ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(Module.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");var read_,readAsync,readBinary,setWindowTitle,nodeFS,nodePath,scriptDirectory="";function locateFile(e){return Module.locateFile?Module.locateFile(e,scriptDirectory):scriptDirectory+e}if(ENVIRONMENT_IS_NODE)scriptDirectory=ENVIRONMENT_IS_WORKER?require("path").dirname(scriptDirectory)+"/":__dirname+"/",read_=function(e,t){return nodeFS=nodeFS||require("fs"),e=(nodePath=nodePath||require("path")).normalize(e),nodeFS.readFileSync(e,t?null:"utf8")},readBinary=function(e){e=read_(e,!0);return assert((e=e.buffer?e:new Uint8Array(e)).buffer),e},1<process.argv.length&&(thisProgram=process.argv[1].replace(/\\/g,"/")),arguments_=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=Module),process.on("uncaughtException",function(e){if(!(e instanceof ExitStatus))throw e}),process.on("unhandledRejection",abort),quit_=function(e){process.exit(e)},Module.inspect=function(){return"[Emscripten Module object]"};else if(ENVIRONMENT_IS_SHELL)"undefined"!=typeof read&&(read_=function(e){return read(e)}),readBinary=function(e){return"function"==typeof readbuffer?new Uint8Array(readbuffer(e)):(assert("object"==typeof(e=read(e,"binary"))),e)},"undefined"!=typeof scriptArgs?arguments_=scriptArgs:"undefined"!=typeof arguments&&(arguments_=arguments),"function"==typeof quit&&(quit_=function(e){quit(e)}),"undefined"!=typeof print&&((console="undefined"==typeof console?{}:console).log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print);else{if(!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER)throw new Error("environment detection error");ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:"undefined"!=typeof document&&document.currentScript&&(scriptDirectory=document.currentScript.src),scriptDirectory=0!==scriptDirectory.indexOf("blob:")?scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1):"",read_=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),readAsync=function(e,t,r){var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType="arraybuffer",o.onload=function(){200==o.status||0==o.status&&o.response?t(o.response):r()},o.onerror=r,o.send(null)},setWindowTitle=function(e){document.title=e}}var out=Module.print||console.log.bind(console),err=Module.printErr||console.warn.bind(console);for(key in moduleOverrides)moduleOverrides.hasOwnProperty(key)&&(Module[key]=moduleOverrides[key]);moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Object.getOwnPropertyDescriptor(Module,"arguments")||Object.defineProperty(Module,"arguments",{configurable:!0,get:function(){abort("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Module.thisProgram&&(thisProgram=Module.thisProgram),Object.getOwnPropertyDescriptor(Module,"thisProgram")||Object.defineProperty(Module,"thisProgram",{configurable:!0,get:function(){abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Module.quit&&(quit_=Module.quit),Object.getOwnPropertyDescriptor(Module,"quit")||Object.defineProperty(Module,"quit",{configurable:!0,get:function(){abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),assert(void 0===Module.memoryInitializerPrefixURL,"Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),assert(void 0===Module.pthreadMainPrefixURL,"Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),assert(void 0===Module.cdInitializerPrefixURL,"Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),assert(void 0===Module.filePackagePrefixURL,"Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),assert(void 0===Module.read,"Module.read option was removed (modify read_ in JS)"),assert(void 0===Module.readAsync,"Module.readAsync option was removed (modify readAsync in JS)"),assert(void 0===Module.readBinary,"Module.readBinary option was removed (modify readBinary in JS)"),assert(void 0===Module.setWindowTitle,"Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),assert(void 0===Module.TOTAL_MEMORY,"Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Object.getOwnPropertyDescriptor(Module,"read")||Object.defineProperty(Module,"read",{configurable:!0,get:function(){abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(Module,"readAsync")||Object.defineProperty(Module,"readAsync",{configurable:!0,get:function(){abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(Module,"readBinary")||Object.defineProperty(Module,"readBinary",{configurable:!0,get:function(){abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(Module,"setWindowTitle")||Object.defineProperty(Module,"setWindowTitle",{configurable:!0,get:function(){abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}});var STACK_ALIGN=16;function alignMemory(e,t){return t=t||STACK_ALIGN,Math.ceil(e/t)*t}function warnOnce(e){warnOnce.shown||(warnOnce.shown={}),warnOnce.shown[e]||(warnOnce.shown[e]=1,err(e))}function convertJsFunctionToWasm(e,t){if("function"==typeof WebAssembly.Function){for(var r={i:"i32",j:"i64",f:"f32",d:"f64"},o={parameters:[],results:"v"==t[0]?[]:[r[t[0]]]},n=1;n<t.length;++n)o.parameters.push(r[t[n]]);return new WebAssembly.Function(o,e)}var a=[1,0,1,96],i=t.slice(0,1),s=t.slice(1),d={i:127,j:126,f:125,d:124};a.push(s.length);for(n=0;n<s.length;++n)a.push(d[s[n]]);"v"==i?a.push(0):a=a.concat([1,d[i]]),a[1]=a.length-2;i=new Uint8Array([0,97,115,109,1,0,0,0].concat(a,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0])),i=new WebAssembly.Module(i);return new WebAssembly.Instance(i,{e:{f:e}}).exports.f}var functionsInTableMap,freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(e){if(e instanceof RangeError)throw"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";throw e}return wasmTable.length-1}function addFunctionWasm(t,r){if(!functionsInTableMap){functionsInTableMap=new WeakMap;for(var e=0;e<wasmTable.length;e++){var o=wasmTable.get(e);o&&functionsInTableMap.set(o,e)}}if(functionsInTableMap.has(t))return functionsInTableMap.get(t);var n=getEmptyTableSlot();try{wasmTable.set(n,t)}catch(e){if(!(e instanceof TypeError))throw e;assert(void 0!==r,"Missing signature argument to addFunction: "+t);r=convertJsFunctionToWasm(t,r);wasmTable.set(n,r)}return functionsInTableMap.set(t,n),n}var wasmBinary,noExitRuntime,wasmMemory,EXITSTATUS,tempRet0=0,setTempRet0=function(e){tempRet0=e},ABORT=(Module.wasmBinary&&(wasmBinary=Module.wasmBinary),Object.getOwnPropertyDescriptor(Module,"wasmBinary")||Object.defineProperty(Module,"wasmBinary",{configurable:!0,get:function(){abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Module.noExitRuntime&&(noExitRuntime=Module.noExitRuntime),Object.getOwnPropertyDescriptor(Module,"noExitRuntime")||Object.defineProperty(Module,"noExitRuntime",{configurable:!0,get:function(){abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),"object"!=typeof WebAssembly&&abort("no native wasm support detected"),!1);function assert(e,t){e||abort("Assertion failed: "+t)}function getCFunc(e){var t=Module["_"+e];return assert(t,"Cannot call unknown function "+e+", make sure it is exported"),t}function ccall(e,t,r,o,n){var a={string:function(e){var t,r=0;return null!=e&&0!==e&&(t=1+(e.length<<2),stringToUTF8(e,r=stackAlloc(t),t)),r},array:function(e){var t=stackAlloc(e.length);return writeArrayToMemory(e,t),t}};var e=getCFunc(e),i=[],s=0;if(assert("array"!==t,'Return type should not be "array".'),o)for(var d=0;d<o.length;d++){var u=a[r[d]];u?(0===s&&(s=stackSave()),i[d]=u(o[d])):i[d]=o[d]}var c,e=e.apply(null,i);return c=e,e="string"===t?UTF8ToString(c):"boolean"===t?Boolean(c):c,0!==s&&stackRestore(s),e}var ALLOC_STACK=1,UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(e,t,r){for(var o=t+r,n=t;e[n]&&!(o<=n);)++n;if(16<n-t&&e.subarray&&UTF8Decoder)return UTF8Decoder.decode(e.subarray(t,n));for(var a="";t<n;){var i,s,d=e[t++];128&d?(s=63&e[t++],192==(224&d)?a+=String.fromCharCode((31&d)<<6|s):(i=63&e[t++],(d=224==(240&d)?(15&d)<<12|s<<6|i:(240!=(248&d)&&warnOnce("Invalid UTF-8 leading byte 0x"+d.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!"),(7&d)<<18|s<<12|i<<6|63&e[t++]))<65536?a+=String.fromCharCode(d):(s=d-65536,a+=String.fromCharCode(55296|s>>10,56320|1023&s)))):a+=String.fromCharCode(d)}return a}function UTF8ToString(e,t){return e?UTF8ArrayToString(HEAPU8,e,t):""}function stringToUTF8Array(e,t,r,o){if(!(0<o))return 0;for(var n=r,a=r+o-1,i=0;i<e.length;++i){var s=e.charCodeAt(i);if((s=55296<=s&&s<=57343?65536+((1023&s)<<10)|1023&e.charCodeAt(++i):s)<=127){if(a<=r)break;t[r++]=s}else if(s<=2047){if(a<=r+1)break;t[r++]=192|s>>6,t[r++]=128|63&s}else if(s<=65535){if(a<=r+2)break;t[r++]=224|s>>12,t[r++]=128|s>>6&63,t[r++]=128|63&s}else{if(a<=r+3)break;2097152<=s&&warnOnce("Invalid Unicode code point 0x"+s.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF)."),t[r++]=240|s>>18,t[r++]=128|s>>12&63,t[r++]=128|s>>6&63,t[r++]=128|63&s}}return t[r]=0,r-n}function stringToUTF8(e,t,r){return assert("number"==typeof r,"stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),stringToUTF8Array(e,HEAPU8,t,r)}function lengthBytesUTF8(e){for(var t=0,r=0;r<e.length;++r){var o=e.charCodeAt(r);(o=55296<=o&&o<=57343?65536+((1023&o)<<10)|1023&e.charCodeAt(++r):o)<=127?++t:t+=o<=2047?2:o<=65535?3:4}return t}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64,UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function allocateUTF8(e){var t=lengthBytesUTF8(e)+1,r=_malloc(t);return r&&stringToUTF8Array(e,HEAP8,r,t),r}function writeArrayToMemory(e,t){assert(0<=e.length,"writeArrayToMemory array must have a length (should be an array or typed array)"),HEAP8.set(e,t)}function writeAsciiToMemory(e,t,r){for(var o=0;o<e.length;++o)assert(e.charCodeAt(o)===e.charCodeAt(o)&255),HEAP8[t++>>0]=e.charCodeAt(o);r||(HEAP8[t>>0]=0)}function alignUp(e,t){return 0<e%t&&(e+=t-e%t),e}function updateGlobalBufferAndViews(e){buffer=e,Module.HEAP8=HEAP8=new Int8Array(e),Module.HEAP16=HEAP16=new Int16Array(e),Module.HEAP32=HEAP32=new Int32Array(e),Module.HEAPU8=HEAPU8=new Uint8Array(e),Module.HEAPU16=HEAPU16=new Uint16Array(e),Module.HEAPU32=HEAPU32=new Uint32Array(e),Module.HEAPF32=HEAPF32=new Float32Array(e),Module.HEAPF64=HEAPF64=new Float64Array(e)}var wasmTable,TOTAL_STACK=5242880,INITIAL_MEMORY=(Module.TOTAL_STACK&&assert(TOTAL_STACK===Module.TOTAL_STACK,"the stack size can no longer be determined at runtime"),Module.INITIAL_MEMORY||209715200);function writeStackCookie(){var e=_emscripten_stack_get_end();assert(0==(3&e)),HEAPU32[1+(e>>2)]=34821223,HEAPU32[2+(e>>2)]=2310721022,HEAP32[0]=1668509029}function checkStackCookie(){var e,t;ABORT||(t=_emscripten_stack_get_end(),e=HEAPU32[1+(t>>2)],t=HEAPU32[2+(t>>2)],34821223==e&&2310721022==t||abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x"+t.toString(16)+" "+e.toString(16)),1668509029!==HEAP32[0]&&abort("Runtime error: The application has corrupted its heap memory area (address zero)!"))}Object.getOwnPropertyDescriptor(Module,"INITIAL_MEMORY")||Object.defineProperty(Module,"INITIAL_MEMORY",{configurable:!0,get:function(){abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),assert(TOTAL_STACK<=INITIAL_MEMORY,"INITIAL_MEMORY should be larger than TOTAL_STACK, was "+INITIAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")"),assert("undefined"!=typeof Int32Array&&"undefined"!=typeof Float64Array&&void 0!==Int32Array.prototype.subarray&&void 0!==Int32Array.prototype.set,"JS engine does not provide full typed array support"),assert(!Module.wasmMemory,"Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally"),assert(209715200==INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically"),function(){var e=new Int16Array(1),t=new Int8Array(e.buffer);if(e[0]=25459,115!==t[0]||99!==t[1])throw"Runtime error: expected the system to be little-endian!"}();var __ATPRERUN__=[],__ATINIT__=[],__ATMAIN__=[],__ATPOSTRUN__=[],runtimeInitialized=!1,runtimeExited=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){checkStackCookie(),assert(!runtimeInitialized),runtimeInitialized=!0,Module.noFSInit||FS.init.initialized||FS.init(),TTY.init(),callRuntimeCallbacks(__ATINIT__)}function preMain(){checkStackCookie(),FS.ignorePermissions=!1,callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){checkStackCookie(),runtimeExited=!0}function postRun(){if(checkStackCookie(),Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(e){__ATPRERUN__.unshift(e)}function addOnPostRun(e){__ATPOSTRUN__.unshift(e)}assert(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),assert(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),assert(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),assert(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null,runDependencyTracking={};function getUniqueRunDependency(e){for(var t=e;;){if(!runDependencyTracking[e])return e;e=t+Math.random()}}function addRunDependency(e){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),e?(assert(!runDependencyTracking[e]),runDependencyTracking[e]=1,null===runDependencyWatcher&&"undefined"!=typeof setInterval&&(runDependencyWatcher=setInterval(function(){if(ABORT)clearInterval(runDependencyWatcher),runDependencyWatcher=null;else{var e,t=!1;for(e in runDependencyTracking)t||(t=!0,err("still waiting on run dependencies:")),err("dependency: "+e);t&&err("(end of list)")}},1e4))):err("warning: run dependency added without ID")}function removeRunDependency(e){runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),e?(assert(runDependencyTracking[e]),delete runDependencyTracking[e]):err("warning: run dependency removed without ID"),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled&&(e=dependenciesFulfilled,dependenciesFulfilled=null,e()))}function abort(e){throw Module.onAbort&&Module.onAbort(e),err(e+=""),ABORT=!0,EXITSTATUS=1,e="abort("+e+") at "+stackTrace(),new WebAssembly.RuntimeError(e)}function hasPrefix(e,t){return String.prototype.startsWith?e.startsWith(t):0===e.indexOf(t)}Module.preloadedImages={},Module.preloadedAudios={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(e){return hasPrefix(e,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(e){return hasPrefix(e,fileURIPrefix)}function createExportWrapper(r,o){return function(){var e=r,t=o;return o||(t=Module.asm),assert(runtimeInitialized,"native function `"+e+"` called before runtime initialization"),assert(!runtimeExited,"native function `"+e+"` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)"),t[r]||assert(t[r],"exported native function `"+e+"` not found"),t[r].apply(null,arguments)}}var tempDouble,tempI64,wasmBinaryFile="ffmpeghelper.wasm";function getBinary(e){try{if(e==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(e);throw"both async and sync fetching of the wasm failed"}catch(e){abort(e)}}function getBinaryPromise(){return wasmBinary||!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER||"function"!=typeof fetch||isFileURI(wasmBinaryFile)?Promise.resolve().then(function(){return getBinary(wasmBinaryFile)}):fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(e){if(e.ok)return e.arrayBuffer();throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}).catch(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var t={env:asmLibraryArg,wasi_snapshot_preview1:asmLibraryArg};function r(e,t){e=e.exports;Module.asm=e,assert(wasmMemory=Module.asm.memory,"memory not found in wasm exports"),updateGlobalBufferAndViews(wasmMemory.buffer),assert(wasmTable=Module.asm.__indirect_function_table,"table not found in wasm exports"),removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");var o=Module;function n(e){assert(Module===o,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),o=null,r(e.instance)}function a(e){return getBinaryPromise().then(function(e){return WebAssembly.instantiate(e,t)}).then(e,function(e){err("failed to asynchronously prepare wasm: "+e),abort(e)})}if(Module.instantiateWasm)try{return Module.instantiateWasm(t,r)}catch(e){return err("Module.instantiateWasm callback failed with error: "+e),!1}return wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(wasmBinaryFile)||isFileURI(wasmBinaryFile)||"function"!=typeof fetch?a(n):fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,t).then(n,function(e){return err("wasm streaming compile failed: "+e),err("falling back to ArrayBuffer instantiation"),a(n)})}),{}}function callRuntimeCallbacks(e){for(;0<e.length;){var t,r=e.shift();"function"==typeof r?r(Module):"number"==typeof(t=r.func)?void 0===r.arg?wasmTable.get(t)():wasmTable.get(t)(r.arg):t(void 0===r.arg?null:r.arg)}}function demangle(e){return warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling"),e}function demangleAll(e){return e.replace(/\b_Z[\w\d_]+/g,function(e){var t=demangle(e);return e===t?e:t+" ["+e+"]"})}function jsStackTrace(){var t=new Error;if(!t.stack){try{throw new Error}catch(e){t=e}if(!t.stack)return"(no stack trace available)"}return t.stack.toString()}function stackTrace(){var e=jsStackTrace();return Module.extraStackTrace&&(e+="\n"+Module.extraStackTrace()),demangleAll(e)}function setErrNo(e){return HEAP32[___errno_location()>>2]=e}isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var PATH={splitPath:function(e){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1)},normalizeArray:function(e,t){for(var r=0,o=e.length-1;0<=o;o--){var n=e[o];"."===n?e.splice(o,1):".."===n?(e.splice(o,1),r++):r&&(e.splice(o,1),r--)}if(t)for(;r;r--)e.unshift("..");return e},normalize:function(e){var t="/"===e.charAt(0),r="/"===e.substr(-1);return(e=(e=PATH.normalizeArray(e.split("/").filter(function(e){return!!e}),!t).join("/"))||t?e:".")&&r&&(e+="/"),(t?"/":"")+e},dirname:function(e){var e=PATH.splitPath(e),t=e[0],e=e[1];return t||e?t+(e=e&&e.substr(0,e.length-1)):"."},basename:function(e){if("/"===e)return"/";var t=(e=(e=PATH.normalize(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?e:e.substr(t+1)},extname:function(e){return PATH.splitPath(e)[3]},join:function(){var e=Array.prototype.slice.call(arguments,0);return PATH.normalize(e.join("/"))},join2:function(e,t){return PATH.normalize(e+"/"+t)}};function getRandomDevice(){var e;if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return e=new Uint8Array(1),function(){return crypto.getRandomValues(e),e[0]};if(ENVIRONMENT_IS_NODE)try{var t=require("crypto");return function(){return t.randomBytes(1)[0]}}catch(e){}return function(){abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}}var PATH_FS={resolve:function(){for(var e="",t=!1,r=arguments.length-1;-1<=r&&!t;r--){var o=0<=r?arguments[r]:FS.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");if(!o)return"";e=o+"/"+e,t="/"===o.charAt(0)}return(t?"/":"")+(e=PATH.normalizeArray(e.split("/").filter(function(e){return!!e}),!t).join("/"))||"."},relative:function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;0<=r&&""===e[r];r--);return r<t?[]:e.slice(t,r-t+1)}e=PATH_FS.resolve(e).substr(1),t=PATH_FS.resolve(t).substr(1);for(var o=r(e.split("/")),n=r(t.split("/")),a=Math.min(o.length,n.length),i=a,s=0;s<a;s++)if(o[s]!==n[s]){i=s;break}for(var d=[],s=i;s<o.length;s++)d.push("..");return(d=d.concat(n.slice(i))).join("/")}},TTY={ttys:[],init:function(){},shutdown:function(){},register:function(e,t){TTY.ttys[e]={input:[],output:[],ops:t},FS.registerDevice(e,TTY.stream_ops)},stream_ops:{open:function(e){var t=TTY.ttys[e.node.rdev];if(!t)throw new FS.ErrnoError(43);e.tty=t,e.seekable=!1},close:function(e){e.tty.ops.flush(e.tty)},flush:function(e){e.tty.ops.flush(e.tty)},read:function(e,t,r,o,n){if(!e.tty||!e.tty.ops.get_char)throw new FS.ErrnoError(60);for(var a,i=0,s=0;s<o;s++){try{a=e.tty.ops.get_char(e.tty)}catch(e){throw new FS.ErrnoError(29)}if(void 0===a&&0===i)throw new FS.ErrnoError(6);if(null==a)break;i++,t[r+s]=a}return i&&(e.node.timestamp=Date.now()),i},write:function(e,t,r,o,n){if(!e.tty||!e.tty.ops.put_char)throw new FS.ErrnoError(60);try{for(var a=0;a<o;a++)e.tty.ops.put_char(e.tty,t[r+a])}catch(e){throw new FS.ErrnoError(29)}return o&&(e.node.timestamp=Date.now()),a}},default_tty_ops:{get_char:function(e){if(!e.input.length){var t=null;if(ENVIRONMENT_IS_NODE){var r=Buffer.alloc?Buffer.alloc(256):new Buffer(256),o=0;try{o=nodeFS.readSync(process.stdin.fd,r,0,256,null)}catch(e){if(-1==e.toString().indexOf("EOF"))throw e;o=0}t=0<o?r.slice(0,o).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n");if(!t)return null;e.input=intArrayFromString(t,!0)}return e.input.shift()},put_char:function(e,t){null===t||10===t?(out(UTF8ArrayToString(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},flush:function(e){e.output&&0<e.output.length&&(out(UTF8ArrayToString(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,t){null===t||10===t?(err(UTF8ArrayToString(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},flush:function(e){e.output&&0<e.output.length&&(err(UTF8ArrayToString(e.output,0)),e.output=[])}}};function mmapAlloc(e){for(var t=alignMemory(e,16384),r=_malloc(t);e<t;)HEAP8[r+e++]=0;return r}var MEMFS={ops_table:null,mount:function(e){return MEMFS.createNode(null,"/",16895,0)},createNode:function(e,t,r,o){if(FS.isBlkdev(r)||FS.isFIFO(r))throw new FS.ErrnoError(63);MEMFS.ops_table||(MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}});r=FS.createNode(e,t,r,o);return FS.isDir(r.mode)?(r.node_ops=MEMFS.ops_table.dir.node,r.stream_ops=MEMFS.ops_table.dir.stream,r.contents={}):FS.isFile(r.mode)?(r.node_ops=MEMFS.ops_table.file.node,r.stream_ops=MEMFS.ops_table.file.stream,r.usedBytes=0,r.contents=null):FS.isLink(r.mode)?(r.node_ops=MEMFS.ops_table.link.node,r.stream_ops=MEMFS.ops_table.link.stream):FS.isChrdev(r.mode)&&(r.node_ops=MEMFS.ops_table.chrdev.node,r.stream_ops=MEMFS.ops_table.chrdev.stream),r.timestamp=Date.now(),e&&(e.contents[t]=r),r},getFileDataAsRegularArray:function(e){if(e.contents&&e.contents.subarray){for(var t=[],r=0;r<e.usedBytes;++r)t.push(e.contents[r]);return t}return e.contents},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array(0)},expandFileStorage:function(e,t){var r=e.contents?e.contents.length:0;t<=r||(t=Math.max(t,r*(r<1048576?2:1.125)>>>0),0!=r&&(t=Math.max(t,256)),r=e.contents,e.contents=new Uint8Array(t),0<e.usedBytes&&e.contents.set(r.subarray(0,e.usedBytes),0))},resizeFileStorage:function(e,t){var r;if(e.usedBytes!=t)if(0==t)e.contents=null,e.usedBytes=0;else if(!e.contents||e.contents.subarray)r=e.contents,e.contents=new Uint8Array(t),r&&e.contents.set(r.subarray(0,Math.min(t,e.usedBytes))),e.usedBytes=t;else{if(e.contents||(e.contents=[]),e.contents.length>t)e.contents.length=t;else for(;e.contents.length<t;)e.contents.push(0);e.usedBytes=t}},node_ops:{getattr:function(e){var t={};return t.dev=FS.isChrdev(e.mode)?e.id:1,t.ino=e.id,t.mode=e.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=e.rdev,FS.isDir(e.mode)?t.size=4096:FS.isFile(e.mode)?t.size=e.usedBytes:FS.isLink(e.mode)?t.size=e.link.length:t.size=0,t.atime=new Date(e.timestamp),t.mtime=new Date(e.timestamp),t.ctime=new Date(e.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr:function(e,t){void 0!==t.mode&&(e.mode=t.mode),void 0!==t.timestamp&&(e.timestamp=t.timestamp),void 0!==t.size&&MEMFS.resizeFileStorage(e,t.size)},lookup:function(e,t){throw FS.genericErrors[44]},mknod:function(e,t,r,o){return MEMFS.createNode(e,t,r,o)},rename:function(e,t,r){if(FS.isDir(e.mode)){var o;try{o=FS.lookupNode(t,r)}catch(e){}if(o)for(var n in o.contents)throw new FS.ErrnoError(55)}delete e.parent.contents[e.name],e.name=r,(t.contents[r]=e).parent=t},unlink:function(e,t){delete e.contents[t]},rmdir:function(e,t){for(var r in FS.lookupNode(e,t).contents)throw new FS.ErrnoError(55);delete e.contents[t]},readdir:function(e){var t,r=[".",".."];for(t in e.contents)e.contents.hasOwnProperty(t)&&r.push(t);return r},symlink:function(e,t,r){e=MEMFS.createNode(e,t,41471,0);return e.link=r,e},readlink:function(e){if(FS.isLink(e.mode))return e.link;throw new FS.ErrnoError(28)}},stream_ops:{read:function(e,t,r,o,n){var a=e.node.contents;if(n>=e.node.usedBytes)return 0;var i=Math.min(e.node.usedBytes-n,o);if(assert(0<=i),8<i&&a.subarray)t.set(a.subarray(n,n+i),r);else for(var s=0;s<i;s++)t[r+s]=a[n+s];return i},write:function(e,t,r,o,n,a){if(assert(!(t instanceof ArrayBuffer)),t.buffer===HEAP8.buffer&&(a=!1),!o)return 0;var i=e.node;if(i.timestamp=Date.now(),t.subarray&&(!i.contents||i.contents.subarray)){if(a)return assert(0===n,"canOwn must imply no weird position inside the file"),i.contents=t.subarray(r,r+o),i.usedBytes=o;if(0===i.usedBytes&&0===n)return i.contents=t.slice(r,r+o),i.usedBytes=o;if(n+o<=i.usedBytes)return i.contents.set(t.subarray(r,r+o),n),o}if(MEMFS.expandFileStorage(i,n+o),i.contents.subarray&&t.subarray)i.contents.set(t.subarray(r,r+o),n);else for(var s=0;s<o;s++)i.contents[n+s]=t[r+s];return i.usedBytes=Math.max(i.usedBytes,n+o),o},llseek:function(e,t,r){if(1===r?t+=e.position:2===r&&FS.isFile(e.node.mode)&&(t+=e.node.usedBytes),t<0)throw new FS.ErrnoError(28);return t},allocate:function(e,t,r){MEMFS.expandFileStorage(e.node,t+r),e.node.usedBytes=Math.max(e.node.usedBytes,t+r)},mmap:function(e,t,r,o,n,a){if(assert(0===t),!FS.isFile(e.node.mode))throw new FS.ErrnoError(43);var i,s,t=e.node.contents;if(2&a||t.buffer!==buffer){if((0<o||o+r<t.length)&&(t=t.subarray?t.subarray(o,o+r):Array.prototype.slice.call(t,o,o+r)),s=!0,!(i=mmapAlloc(r)))throw new FS.ErrnoError(48);HEAP8.set(t,i)}else s=!1,i=t.byteOffset;return{ptr:i,allocated:s}},msync:function(e,t,r,o,n){if(FS.isFile(e.node.mode))return 2&n||MEMFS.stream_ops.write(e,t,0,o,r,!1),0;throw new FS.ErrnoError(43)}}},ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"},ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135},FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(e,t){if(t=t||{},!(e=PATH_FS.resolve(FS.cwd(),e)))return{path:"",node:null};var r,o={follow_mount:!0,recurse_count:0};for(r in o)void 0===t[r]&&(t[r]=o[r]);if(8<t.recurse_count)throw new FS.ErrnoError(32);for(var n=PATH.normalizeArray(e.split("/").filter(function(e){return!!e}),!1),a=FS.root,i="/",s=0;s<n.length;s++){var d=s===n.length-1;if(d&&t.parent)break;if(a=FS.lookupNode(a,n[s]),i=PATH.join2(i,n[s]),!FS.isMountpoint(a)||d&&!t.follow_mount||(a=a.mounted.root),!d||t.follow)for(var u=0;FS.isLink(a.mode);){var c=FS.readlink(i),i=PATH_FS.resolve(PATH.dirname(i),c),a=FS.lookupPath(i,{recurse_count:t.recurse_count}).node;if(40<u++)throw new FS.ErrnoError(32)}}return{path:i,node:a}},getPath:function(e){for(var t,r;;){if(FS.isRoot(e))return r=e.mount.mountpoint,t?"/"!==r[r.length-1]?r+"/"+t:r+t:r;t=t?e.name+"/"+t:e.name,e=e.parent}},hashName:function(e,t){for(var r=0,o=0;o<t.length;o++)r=(r<<5)-r+t.charCodeAt(o)|0;return(e+r>>>0)%FS.nameTable.length},hashAddNode:function(e){var t=FS.hashName(e.parent.id,e.name);e.name_next=FS.nameTable[t],FS.nameTable[t]=e},hashRemoveNode:function(e){var t=FS.hashName(e.parent.id,e.name);if(FS.nameTable[t]===e)FS.nameTable[t]=e.name_next;else for(var r=FS.nameTable[t];r;){if(r.name_next===e){r.name_next=e.name_next;break}r=r.name_next}},lookupNode:function(e,t){var r=FS.mayLookup(e);if(r)throw new FS.ErrnoError(r,e);for(var r=FS.hashName(e.id,t),o=FS.nameTable[r];o;o=o.name_next){var n=o.name;if(o.parent.id===e.id&&n===t)return o}return FS.lookup(e,t)},createNode:function(e,t,r,o){e=new FS.FSNode(e,t,r,o);return FS.hashAddNode(e),e},destroyNode:function(e){FS.hashRemoveNode(e)},isRoot:function(e){return e===e.parent},isMountpoint:function(e){return!!e.mounted},isFile:function(e){return 32768==(61440&e)},isDir:function(e){return 16384==(61440&e)},isLink:function(e){return 40960==(61440&e)},isChrdev:function(e){return 8192==(61440&e)},isBlkdev:function(e){return 24576==(61440&e)},isFIFO:function(e){return 4096==(61440&e)},isSocket:function(e){return 49152==(49152&e)},flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:function(e){var t=FS.flagModes[e];if(void 0===t)throw new Error("Unknown file open mode: "+e);return t},flagsToPermissionString:function(e){var t=["r","w","rw"][3&e];return 512&e&&(t+="w"),t},nodePermissions:function(e,t){return FS.ignorePermissions||(-1===t.indexOf("r")||292&e.mode)&&(-1===t.indexOf("w")||146&e.mode)&&(-1===t.indexOf("x")||73&e.mode)?0:2},mayLookup:function(e){var t=FS.nodePermissions(e,"x");return t||(e.node_ops.lookup?0:2)},mayCreate:function(e,t){try{FS.lookupNode(e,t);return 20}catch(e){}return FS.nodePermissions(e,"wx")},mayDelete:function(e,t,r){var o;try{o=FS.lookupNode(e,t)}catch(e){return e.errno}t=FS.nodePermissions(e,"wx");if(t)return t;if(r){if(!FS.isDir(o.mode))return 54;if(FS.isRoot(o)||FS.getPath(o)===FS.cwd())return 10}else if(FS.isDir(o.mode))return 31;return 0},mayOpen:function(e,t){return e?FS.isLink(e.mode)?32:FS.isDir(e.mode)&&("r"!==FS.flagsToPermissionString(t)||512&t)?31:FS.nodePermissions(e,FS.flagsToPermissionString(t)):44},MAX_OPEN_FDS:4096,nextfd:function(e,t){t=t||FS.MAX_OPEN_FDS;for(var r=e=e||0;r<=t;r++)if(!FS.streams[r])return r;throw new FS.ErrnoError(33)},getStream:function(e){return FS.streams[e]},createStream:function(e,t,r){FS.FSStream||(FS.FSStream=function(){},FS.FSStream.prototype={object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}});var o,n=new FS.FSStream;for(o in e)n[o]=e[o];e=n;t=FS.nextfd(t,r);return e.fd=t,FS.streams[t]=e},closeStream:function(e){FS.streams[e]=null},chrdev_stream_ops:{open:function(e){var t=FS.getDevice(e.node.rdev);e.stream_ops=t.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:function(){throw new FS.ErrnoError(70)}},major:function(e){return e>>8},minor:function(e){return 255&e},makedev:function(e,t){return e<<8|t},registerDevice:function(e,t){FS.devices[e]={stream_ops:t}},getDevice:function(e){return FS.devices[e]},getMounts:function(e){for(var t=[],r=[e];r.length;){var o=r.pop();t.push(o),r.push.apply(r,o.mounts)}return t},syncfs:function(t,r){"function"==typeof t&&(r=t,t=!1),FS.syncFSRequests++,1<FS.syncFSRequests&&err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var o=FS.getMounts(FS.root.mount),n=0;function a(e){return assert(0<FS.syncFSRequests),FS.syncFSRequests--,r(e)}function i(e){if(e)return i.errored?void 0:(i.errored=!0,a(e));++n>=o.length&&a(null)}o.forEach(function(e){if(!e.type.syncfs)return i(null);e.type.syncfs(e,t,i)})},mount:function(e,t,r){if("string"==typeof e)throw e;var o,n="/"===r,a=!r;if(n&&FS.root)throw new FS.ErrnoError(10);if(!n&&!a){a=FS.lookupPath(r,{follow_mount:!1});if(r=a.path,o=a.node,FS.isMountpoint(o))throw new FS.ErrnoError(10);if(!FS.isDir(o.mode))throw new FS.ErrnoError(54)}a={type:e,opts:t,mountpoint:r,mounts:[]},t=e.mount(a);return(t.mount=a).root=t,n?FS.root=t:o&&(o.mounted=a,o.mount&&o.mount.mounts.push(a)),t},unmount:function(e){e=FS.lookupPath(e,{follow_mount:!1});if(!FS.isMountpoint(e.node))throw new FS.ErrnoError(28);var e=e.node,t=e.mounted,o=FS.getMounts(t),t=(Object.keys(FS.nameTable).forEach(function(e){for(var t=FS.nameTable[e];t;){var r=t.name_next;-1!==o.indexOf(t.mount)&&FS.destroyNode(t),t=r}}),e.mounted=null,e.mount.mounts.indexOf(t));assert(-1!==t),e.mount.mounts.splice(t,1)},lookup:function(e,t){return e.node_ops.lookup(e,t)},mknod:function(e,t,r){var o=FS.lookupPath(e,{parent:!0}).node,e=PATH.basename(e);if(!e||"."===e||".."===e)throw new FS.ErrnoError(28);var n=FS.mayCreate(o,e);if(n)throw new FS.ErrnoError(n);if(o.node_ops.mknod)return o.node_ops.mknod(o,e,t,r);throw new FS.ErrnoError(63)},create:function(e,t){return FS.mknod(e,t=(t=void 0!==t?t:438)&4095|32768,0)},mkdir:function(e,t){return FS.mknod(e,t=(t=void 0!==t?t:511)&1023|16384,0)},mkdirTree:function(e,t){for(var r=e.split("/"),o="",n=0;n<r.length;++n)if(r[n]){o+="/"+r[n];try{FS.mkdir(o,t)}catch(e){if(20!=e.errno)throw e}}},mkdev:function(e,t,r){return void 0===r&&(r=t,t=438),FS.mknod(e,t|=8192,r)},symlink:function(e,t){if(!PATH_FS.resolve(e))throw new FS.ErrnoError(44);var r=FS.lookupPath(t,{parent:!0}).node;if(!r)throw new FS.ErrnoError(44);var t=PATH.basename(t),o=FS.mayCreate(r,t);if(o)throw new FS.ErrnoError(o);if(r.node_ops.symlink)return r.node_ops.symlink(r,t,e);throw new FS.ErrnoError(63)},rename:function(t,r){var e=PATH.dirname(t),o=PATH.dirname(r),n=PATH.basename(t),a=PATH.basename(r),i=FS.lookupPath(t,{parent:!0}),i=i.node,s=FS.lookupPath(r,{parent:!0}).node;if(!i||!s)throw new FS.ErrnoError(44);if(i.mount!==s.mount)throw new FS.ErrnoError(75);var d,u=FS.lookupNode(i,n),o=PATH_FS.relative(t,o);if("."!==o.charAt(0))throw new FS.ErrnoError(28);if("."!==(o=PATH_FS.relative(r,e)).charAt(0))throw new FS.ErrnoError(55);try{d=FS.lookupNode(s,a)}catch(e){}if(u!==d){e=FS.isDir(u.mode),o=FS.mayDelete(i,n,e);if(o)throw new FS.ErrnoError(o);if(o=d?FS.mayDelete(s,a,e):FS.mayCreate(s,a))throw new FS.ErrnoError(o);if(!i.node_ops.rename)throw new FS.ErrnoError(63);if(FS.isMountpoint(u)||d&&FS.isMountpoint(d))throw new FS.ErrnoError(10);if(s!==i&&(o=FS.nodePermissions(i,"w")))throw new FS.ErrnoError(o);try{FS.trackingDelegate.willMovePath&&FS.trackingDelegate.willMovePath(t,r)}catch(e){err("FS.trackingDelegate['willMovePath']('"+t+"', '"+r+"') threw an exception: "+e.message)}FS.hashRemoveNode(u);try{i.node_ops.rename(u,s,a)}catch(e){throw e}finally{FS.hashAddNode(u)}try{FS.trackingDelegate.onMovePath&&FS.trackingDelegate.onMovePath(t,r)}catch(e){err("FS.trackingDelegate['onMovePath']('"+t+"', '"+r+"') threw an exception: "+e.message)}}},rmdir:function(t){var e=FS.lookupPath(t,{parent:!0}).node,r=PATH.basename(t),o=FS.lookupNode(e,r),n=FS.mayDelete(e,r,!0);if(n)throw new FS.ErrnoError(n);if(!e.node_ops.rmdir)throw new FS.ErrnoError(63);if(FS.isMountpoint(o))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(t)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.rmdir(e,r),FS.destroyNode(o);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(t)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readdir:function(e){e=FS.lookupPath(e,{follow:!0}).node;if(e.node_ops.readdir)return e.node_ops.readdir(e);throw new FS.ErrnoError(54)},unlink:function(t){var e=FS.lookupPath(t,{parent:!0}).node,r=PATH.basename(t),o=FS.lookupNode(e,r),n=FS.mayDelete(e,r,!1);if(n)throw new FS.ErrnoError(n);if(!e.node_ops.unlink)throw new FS.ErrnoError(63);if(FS.isMountpoint(o))throw new FS.ErrnoError(10);try{FS.trackingDelegate.willDeletePath&&FS.trackingDelegate.willDeletePath(t)}catch(e){err("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.unlink(e,r),FS.destroyNode(o);try{FS.trackingDelegate.onDeletePath&&FS.trackingDelegate.onDeletePath(t)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readlink:function(e){e=FS.lookupPath(e).node;if(!e)throw new FS.ErrnoError(44);if(e.node_ops.readlink)return PATH_FS.resolve(FS.getPath(e.parent),e.node_ops.readlink(e));throw new FS.ErrnoError(28)},stat:function(e,t){e=FS.lookupPath(e,{follow:!t}).node;if(!e)throw new FS.ErrnoError(44);if(e.node_ops.getattr)return e.node_ops.getattr(e);throw new FS.ErrnoError(63)},lstat:function(e){return FS.stat(e,!0)},chmod:function(e,t,r){if(!(r="string"==typeof e?FS.lookupPath(e,{follow:!r}).node:e).node_ops.setattr)throw new FS.ErrnoError(63);r.node_ops.setattr(r,{mode:4095&t|-4096&r.mode,timestamp:Date.now()})},lchmod:function(e,t){FS.chmod(e,t,!0)},fchmod:function(e,t){e=FS.getStream(e);if(!e)throw new FS.ErrnoError(8);FS.chmod(e.node,t)},chown:function(e,t,r,o){if(!(o="string"==typeof e?FS.lookupPath(e,{follow:!o}).node:e).node_ops.setattr)throw new FS.ErrnoError(63);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(e,t,r){FS.chown(e,t,r,!0)},fchown:function(e,t,r){e=FS.getStream(e);if(!e)throw new FS.ErrnoError(8);FS.chown(e.node,t,r)},truncate:function(e,t){if(t<0)throw new FS.ErrnoError(28);if(!(e="string"==typeof e?FS.lookupPath(e,{follow:!0}).node:e).node_ops.setattr)throw new FS.ErrnoError(63);if(FS.isDir(e.mode))throw new FS.ErrnoError(31);if(!FS.isFile(e.mode))throw new FS.ErrnoError(28);var r=FS.nodePermissions(e,"w");if(r)throw new FS.ErrnoError(r);e.node_ops.setattr(e,{size:t,timestamp:Date.now()})},ftruncate:function(e,t){e=FS.getStream(e);if(!e)throw new FS.ErrnoError(8);if(0==(2097155&e.flags))throw new FS.ErrnoError(28);FS.truncate(e.node,t)},utime:function(e,t,r){e=FS.lookupPath(e,{follow:!0}).node;e.node_ops.setattr(e,{timestamp:Math.max(t,r)})},open:function(t,e,r,o,n){if(""===t)throw new FS.ErrnoError(44);if(r=void 0===r?438:r,r=64&(e="string"==typeof e?FS.modeStringToFlags(e):e)?4095&r|32768:0,"object"==typeof t)a=t;else{t=PATH.normalize(t);try{var a=FS.lookupPath(t,{follow:!(131072&e)}).node}catch(e){}}var i=!1;if(64&e)if(a){if(128&e)throw new FS.ErrnoError(20)}else a=FS.mknod(t,r,0),i=!0;if(!a)throw new FS.ErrnoError(44);if(FS.isChrdev(a.mode)&&(e&=-513),65536&e&&!FS.isDir(a.mode))throw new FS.ErrnoError(54);if(!i){r=FS.mayOpen(a,e);if(r)throw new FS.ErrnoError(r)}512&e&&FS.truncate(a,0),e&=-131713;var s,i=FS.createStream({node:a,path:FS.getPath(a),flags:e,seekable:!0,position:0,stream_ops:a.stream_ops,ungotten:[],error:!1},o,n);i.stream_ops.open&&i.stream_ops.open(i),!Module.logReadFiles||1&e||(FS.readFiles||(FS.readFiles={}),t in FS.readFiles||(FS.readFiles[t]=1,err("FS.trackingDelegate error on read file: "+t)));try{FS.trackingDelegate.onOpenFile&&(s=0,1!=(2097155&e)&&(s|=FS.tracking.openFlags.READ),0!=(2097155&e)&&(s|=FS.tracking.openFlags.WRITE),FS.trackingDelegate.onOpenFile(t,s))}catch(e){err("FS.trackingDelegate['onOpenFile']('"+t+"', flags) threw an exception: "+e.message)}return i},close:function(e){if(FS.isClosed(e))throw new FS.ErrnoError(8);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{FS.closeStream(e.fd)}e.fd=null},isClosed:function(e){return null===e.fd},llseek:function(e,t,r){if(FS.isClosed(e))throw new FS.ErrnoError(8);if(!e.seekable||!e.stream_ops.llseek)throw new FS.ErrnoError(70);if(0!=r&&1!=r&&2!=r)throw new FS.ErrnoError(28);return e.position=e.stream_ops.llseek(e,t,r),e.ungotten=[],e.position},read:function(e,t,r,o,n){if(o<0||n<0)throw new FS.ErrnoError(28);if(FS.isClosed(e))throw new FS.ErrnoError(8);if(1==(2097155&e.flags))throw new FS.ErrnoError(8);if(FS.isDir(e.node.mode))throw new FS.ErrnoError(31);if(!e.stream_ops.read)throw new FS.ErrnoError(28);var a=void 0!==n;if(a){if(!e.seekable)throw new FS.ErrnoError(70)}else n=e.position;t=e.stream_ops.read(e,t,r,o,n);return a||(e.position+=t),t},write:function(t,e,r,o,n,a){if(o<0||n<0)throw new FS.ErrnoError(28);if(FS.isClosed(t))throw new FS.ErrnoError(8);if(0==(2097155&t.flags))throw new FS.ErrnoError(8);if(FS.isDir(t.node.mode))throw new FS.ErrnoError(31);if(!t.stream_ops.write)throw new FS.ErrnoError(28);t.seekable&&1024&t.flags&&FS.llseek(t,0,2);var i=void 0!==n;if(i){if(!t.seekable)throw new FS.ErrnoError(70)}else n=t.position;e=t.stream_ops.write(t,e,r,o,n,a);i||(t.position+=e);try{t.path&&FS.trackingDelegate.onWriteToFile&&FS.trackingDelegate.onWriteToFile(t.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+t.path+"') threw an exception: "+e.message)}return e},allocate:function(e,t,r){if(FS.isClosed(e))throw new FS.ErrnoError(8);if(t<0||r<=0)throw new FS.ErrnoError(28);if(0==(2097155&e.flags))throw new FS.ErrnoError(8);if(!FS.isFile(e.node.mode)&&!FS.isDir(e.node.mode))throw new FS.ErrnoError(43);if(!e.stream_ops.allocate)throw new FS.ErrnoError(138);e.stream_ops.allocate(e,t,r)},mmap:function(e,t,r,o,n,a){if(0!=(2&n)&&0==(2&a)&&2!=(2097155&e.flags))throw new FS.ErrnoError(2);if(1==(2097155&e.flags))throw new FS.ErrnoError(2);if(e.stream_ops.mmap)return e.stream_ops.mmap(e,t,r,o,n,a);throw new FS.ErrnoError(43)},msync:function(e,t,r,o,n){return e&&e.stream_ops.msync?e.stream_ops.msync(e,t,r,o,n):0},munmap:function(e){return 0},ioctl:function(e,t,r){if(e.stream_ops.ioctl)return e.stream_ops.ioctl(e,t,r);throw new FS.ErrnoError(59)},readFile:function(e,t){if((t=t||{}).flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error('Invalid encoding type "'+t.encoding+'"');var r,o=FS.open(e,t.flags),e=FS.stat(e).size,n=new Uint8Array(e);return FS.read(o,n,0,e,0),"utf8"===t.encoding?r=UTF8ArrayToString(n,0):"binary"===t.encoding&&(r=n),FS.close(o),r},writeFile:function(e,t,r){(r=r||{}).flags=r.flags||577;e=FS.open(e,r.flags,r.mode);if("string"==typeof t){var o=new Uint8Array(lengthBytesUTF8(t)+1),n=stringToUTF8Array(t,o,0,o.length);FS.write(e,o,0,n,void 0,r.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");FS.write(e,t,0,t.byteLength,void 0,r.canOwn)}FS.close(e)},cwd:function(){return FS.currentPath},chdir:function(e){e=FS.lookupPath(e,{follow:!0});if(null===e.node)throw new FS.ErrnoError(44);if(!FS.isDir(e.node.mode))throw new FS.ErrnoError(54);var t=FS.nodePermissions(e.node,"x");if(t)throw new FS.ErrnoError(t);FS.currentPath=e.path},createDefaultDirectories:function(){FS.mkdir("/tmp"),FS.mkdir("/home"),FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev"),FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(e,t,r,o,n){return o}}),FS.mkdev("/dev/null",FS.makedev(1,3)),TTY.register(FS.makedev(5,0),TTY.default_tty_ops),TTY.register(FS.makedev(6,0),TTY.default_tty1_ops),FS.mkdev("/dev/tty",FS.makedev(5,0)),FS.mkdev("/dev/tty1",FS.makedev(6,0));var e=getRandomDevice();FS.createDevice("/dev","random",e),FS.createDevice("/dev","urandom",e),FS.mkdir("/dev/shm"),FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc"),FS.mkdir("/proc/self"),FS.mkdir("/proc/self/fd"),FS.mount({mount:function(){var e=FS.createNode("/proc/self","fd",16895,73);return e.node_ops={lookup:function(e,t){var r=FS.getStream(+t);if(!r)throw new FS.ErrnoError(8);t={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return r.path}}};return t.parent=t}},e}},{},"/proc/self/fd")},createStandardStreams:function(){Module.stdin?FS.createDevice("/dev","stdin",Module.stdin):FS.symlink("/dev/tty","/dev/stdin"),Module.stdout?FS.createDevice("/dev","stdout",null,Module.stdout):FS.symlink("/dev/tty","/dev/stdout"),Module.stderr?FS.createDevice("/dev","stderr",null,Module.stderr):FS.symlink("/dev/tty1","/dev/stderr");var e=FS.open("/dev/stdin",0),t=FS.open("/dev/stdout",1),r=FS.open("/dev/stderr",1);assert(0===e.fd,"invalid handle for stdin ("+e.fd+")"),assert(1===t.fd,"invalid handle for stdout ("+t.fd+")"),assert(2===r.fd,"invalid handle for stderr ("+r.fd+")")},ensureErrnoError:function(){FS.ErrnoError||(FS.ErrnoError=function(e,t){this.node=t,this.setErrno=function(e){for(var t in this.errno=e,ERRNO_CODES)if(ERRNO_CODES[t]===e){this.code=t;break}},this.setErrno(e),this.message=ERRNO_MESSAGES[e],this.stack&&(Object.defineProperty(this,"stack",{value:(new Error).stack,writable:!0}),this.stack=demangleAll(this.stack))},FS.ErrnoError.prototype=new Error,FS.ErrnoError.prototype.constructor=FS.ErrnoError,[44].forEach(function(e){FS.genericErrors[e]=new FS.ErrnoError(e),FS.genericErrors[e].stack="<generic error, no stack>"}))},staticInit:function(){FS.ensureErrnoError(),FS.nameTable=new Array(4096),FS.mount(MEMFS,{},"/"),FS.createDefaultDirectories(),FS.createDefaultDevices(),FS.createSpecialDirectories(),FS.filesystems={MEMFS:MEMFS}},init:function(e,t,r){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),FS.init.initialized=!0,FS.ensureErrnoError(),Module.stdin=e||Module.stdin,Module.stdout=t||Module.stdout,Module.stderr=r||Module.stderr,FS.createStandardStreams()},quit:function(){FS.init.initialized=!1;var e=Module._fflush;e&&e(0);for(var t=0;t<FS.streams.length;t++){var r=FS.streams[t];r&&FS.close(r)}},getMode:function(e,t){var r=0;return e&&(r|=365),t&&(r|=146),r},findObject:function(e,t){e=FS.analyzePath(e,t);return e.exists?e.object:null},analyzePath:function(e,t){try{e=(o=FS.lookupPath(e,{follow:!t})).path}catch(e){}var r={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var o=FS.lookupPath(e,{parent:!0});r.parentExists=!0,r.parentPath=o.path,r.parentObject=o.node,r.name=PATH.basename(e),o=FS.lookupPath(e,{follow:!t}),r.exists=!0,r.path=o.path,r.object=o.node,r.name=o.node.name,r.isRoot="/"===o.path}catch(e){r.error=e.errno}return r},createPath:function(e,t,r,o){e="string"==typeof e?e:FS.getPath(e);for(var n=t.split("/").reverse();n.length;){var a=n.pop();if(a){var i=PATH.join2(e,a);try{FS.mkdir(i)}catch(e){}e=i}}return i},createFile:function(e,t,r,o,n){e=PATH.join2("string"==typeof e?e:FS.getPath(e),t),t=FS.getMode(o,n);return FS.create(e,t)},createDataFile:function(e,t,r,o,n,a){t=t?PATH.join2("string"==typeof e?e:FS.getPath(e),t):e,e=FS.getMode(o,n),o=FS.create(t,e);if(r){if("string"==typeof r){for(var i=new Array(r.length),s=0,d=r.length;s<d;++s)i[s]=r.charCodeAt(s);r=i}FS.chmod(o,146|e);n=FS.open(o,577);FS.write(n,r,0,r.length,0,a),FS.close(n),FS.chmod(o,e)}return o},createDevice:function(e,t,d,i){var e=PATH.join2("string"==typeof e?e:FS.getPath(e),t),t=FS.getMode(!!d,!!i),r=(FS.createDevice.major||(FS.createDevice.major=64),FS.makedev(FS.createDevice.major++,0));return FS.registerDevice(r,{open:function(e){e.seekable=!1},close:function(e){i&&i.buffer&&i.buffer.length&&i(10)},read:function(e,t,r,o,n){for(var a,i=0,s=0;s<o;s++){try{a=d()}catch(e){throw new FS.ErrnoError(29)}if(void 0===a&&0===i)throw new FS.ErrnoError(6);if(null==a)break;i++,t[r+s]=a}return i&&(e.node.timestamp=Date.now()),i},write:function(e,t,r,o,n){for(var a=0;a<o;a++)try{i(t[r+a])}catch(e){throw new FS.ErrnoError(29)}return o&&(e.node.timestamp=Date.now()),a}}),FS.mkdev(e,t,r)},forceLoadFile:function(e){if(e.isDevice||e.isFolder||e.link||e.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!read_)throw new Error("Cannot load without read() or XMLHttpRequest.");try{e.contents=intArrayFromString(read_(e.url),!0),e.usedBytes=e.contents.length}catch(e){throw new FS.ErrnoError(29)}},createLazyFile:function(e,t,i,r,o){function n(){this.lengthKnown=!1,this.chunks=[]}if(n.prototype.get=function(e){var t;if(!(e>this.length-1||e<0))return t=e%this.chunkSize,e=e/this.chunkSize|0,this.getter(e)[t]},n.prototype.setDataGetter=function(e){this.getter=e},n.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",i,!1),e.send(null),!(200<=e.status&&e.status<300||304===e.status))throw new Error("Couldn't load "+i+". Status: "+e.status);var t,o=Number(e.getResponseHeader("Content-length")),r=(t=e.getResponseHeader("Accept-Ranges"))&&"bytes"===t,e=(t=e.getResponseHeader("Content-Encoding"))&&"gzip"===t,n=1048576,a=(r||(n=o),this);a.setDataGetter(function(e){var t=e*n,r=(e+1)*n-1,r=Math.min(r,o-1);if(void 0===a.chunks[e]&&(a.chunks[e]=function(e,t){if(t<e)throw new Error("invalid range ("+e+", "+t+") or no bytes requested!");if(o-1<t)throw new Error("only "+o+" bytes available! programmer error!");var r=new XMLHttpRequest;if(r.open("GET",i,!1),o!==n&&r.setRequestHeader("Range","bytes="+e+"-"+t),"undefined"!=typeof Uint8Array&&(r.responseType="arraybuffer"),r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),200<=r.status&&r.status<300||304===r.status)return void 0!==r.response?new Uint8Array(r.response||[]):intArrayFromString(r.responseText||"",!0);throw new Error("Couldn't load "+i+". Status: "+r.status)}(t,r)),void 0===a.chunks[e])throw new Error("doXHR failed!");return a.chunks[e]}),!e&&o||(n=o=1,o=this.getter(0).length,n=o,out("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=o,this._chunkSize=n,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a=new n,a=(Object.defineProperties(a,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}}),{isDevice:!1,contents:a})}else a={isDevice:!1,url:i};var d=FS.createFile(e,t,a,r,o),s=(a.contents?d.contents=a.contents:a.url&&(d.contents=null,d.url=a.url),Object.defineProperties(d,{usedBytes:{get:function(){return this.contents.length}}}),{});return Object.keys(d.stream_ops).forEach(function(e){var t=d.stream_ops[e];s[e]=function(){return FS.forceLoadFile(d),t.apply(null,arguments)}}),s.read=function(e,t,r,o,n){FS.forceLoadFile(d);var a=e.node.contents;if(n>=a.length)return 0;var i=Math.min(a.length-n,o);if(assert(0<=i),a.slice)for(var s=0;s<i;s++)t[r+s]=a[n+s];else for(s=0;s<i;s++)t[r+s]=a.get(n+s);return i},d.stream_ops=s,d},createPreloadedFile:function(n,a,e,i,s,d,u,c,l,E){Browser.init();var p=a?PATH_FS.resolve(PATH.join2(n,a)):n,f=getUniqueRunDependency("cp "+p);function t(t){function r(e){E&&E(),c||FS.createDataFile(n,a,e,i,s,l),d&&d(),removeRunDependency(f)}var o=!1;Module.preloadPlugins.forEach(function(e){o||e.canHandle(p)&&(e.handle(t,p,r,function(){u&&u(),removeRunDependency(f)}),o=!0)}),o||r(t)}addRunDependency(f),"string"==typeof e?Browser.asyncLoad(e,function(e){t(e)},u):t(e)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(i,s,d){s=s||function(){},d=d||function(){};var e=FS.indexedDB();try{var u=e.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return d(e)}u.onupgradeneeded=function(){out("creating db"),u.result.createObjectStore(FS.DB_STORE_NAME)},u.onsuccess=function(){var e=u.result.transaction([FS.DB_STORE_NAME],"readwrite"),t=e.objectStore(FS.DB_STORE_NAME),r=0,o=0,n=i.length;function a(){(0==o?s:d)()}i.forEach(function(e){e=t.put(FS.analyzePath(e).object.contents,e);e.onsuccess=function(){++r+o==n&&a()},e.onerror=function(){r+ ++o==n&&a()}}),e.onerror=d},u.onerror=d},loadFilesFromDB:function(s,d,u){d=d||function(){},u=u||function(){};var e=FS.indexedDB();try{var c=e.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return u(e)}c.onupgradeneeded=u,c.onsuccess=function(){var e=c.result;try{var t=e.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){return void u(e)}var r=t.objectStore(FS.DB_STORE_NAME),o=0,n=0,a=s.length;function i(){(0==n?d:u)()}s.forEach(function(e){var t=r.get(e);t.onsuccess=function(){FS.analyzePath(e).exists&&FS.unlink(e),FS.createDataFile(PATH.dirname(e),PATH.basename(e),t.result,!0,!0,!0),++o+n==a&&i()},t.onerror=function(){o+ ++n==a&&i()}}),t.onerror=u},c.onerror=u},absolutePath:function(){abort("FS.absolutePath has been removed; use PATH_FS.resolve instead")},createFolder:function(){abort("FS.createFolder has been removed; use FS.mkdir instead")},createLink:function(){abort("FS.createLink has been removed; use FS.symlink instead")},joinPath:function(){abort("FS.joinPath has been removed; use PATH.join instead")},mmapAlloc:function(){abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc")},standardizePath:function(){abort("FS.standardizePath has been removed; use PATH.normalize instead")}},SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(e,t){if("/"!==t[0]){var r;if(-100===e)r=FS.cwd();else{e=FS.getStream(e);if(!e)throw new FS.ErrnoError(8);r=e.path}t=PATH.join2(r,t)}return t},doStat:function(e,t,r){try{var o=e(t)}catch(e){if(e&&e.node&&PATH.normalize(t)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}return HEAP32[r>>2]=o.dev,HEAP32[r+4>>2]=0,HEAP32[r+8>>2]=o.ino,HEAP32[r+12>>2]=o.mode,HEAP32[r+16>>2]=o.nlink,HEAP32[r+20>>2]=o.uid,HEAP32[r+24>>2]=o.gid,HEAP32[r+28>>2]=o.rdev,HEAP32[r+32>>2]=0,tempI64=[o.size>>>0,(tempDouble=o.size,1<=+Math.abs(tempDouble)?0<tempDouble?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+40>>2]=tempI64[0],HEAP32[r+44>>2]=tempI64[1],HEAP32[r+48>>2]=4096,HEAP32[r+52>>2]=o.blocks,HEAP32[r+56>>2]=o.atime.getTime()/1e3|0,HEAP32[r+60>>2]=0,HEAP32[r+64>>2]=o.mtime.getTime()/1e3|0,HEAP32[r+68>>2]=0,HEAP32[r+72>>2]=o.ctime.getTime()/1e3|0,HEAP32[r+76>>2]=0,tempI64=[o.ino>>>0,(tempDouble=o.ino,1<=+Math.abs(tempDouble)?0<tempDouble?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+80>>2]=tempI64[0],HEAP32[r+84>>2]=tempI64[1],0},doMsync:function(e,t,r,o,n){e=HEAPU8.slice(e,e+r);FS.msync(t,e,n,r,o)},doMkdir:function(e,t){return"/"===(e=PATH.normalize(e))[e.length-1]&&(e=e.substr(0,e.length-1)),FS.mkdir(e,t,0),0},doMknod:function(e,t,r){switch(61440&t){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return FS.mknod(e,t,r),0},doReadlink:function(e,t,r){if(r<=0)return-28;var e=FS.readlink(e),o=Math.min(r,lengthBytesUTF8(e)),n=HEAP8[t+o];return stringToUTF8(e,t,r+1),HEAP8[t+o]=n,o},doAccess:function(e,t){if(-8&t)return-28;e=FS.lookupPath(e,{follow:!0}).node;if(!e)return-44;var r="";return 4&t&&(r+="r"),2&t&&(r+="w"),1&t&&(r+="x"),r&&FS.nodePermissions(e,r)?-2:0},doDup:function(e,t,r){var o=FS.getStream(r);return o&&FS.close(o),FS.open(e,t,0,r,r).fd},doReadv:function(e,t,r,o){for(var n=0,a=0;a<r;a++){var i=HEAP32[t+8*a>>2],s=HEAP32[t+(8*a+4)>>2],i=FS.read(e,HEAP8,i,s,o);if(i<0)return-1;if(n+=i,i<s)break}return n},doWritev:function(e,t,r,o){for(var n=0,a=0;a<r;a++){var i=HEAP32[t+8*a>>2],s=HEAP32[t+(8*a+4)>>2],i=FS.write(e,HEAP8,i,s,o);if(i<0)return-1;n+=i}return n},varargs:void 0,get:function(){return assert(null!=SYSCALLS.varargs),SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>2]},getStr:function(e){return UTF8ToString(e)},getStreamFromFD:function(e){e=FS.getStream(e);if(e)return e;throw new FS.ErrnoError(8)},get64:function(e,t){return assert(0<=e?0===t:-1===t),e}};function ___sys_fcntl64(e,t,r){SYSCALLS.varargs=r;try{var o=SYSCALLS.getStreamFromFD(e);switch(t){case 0:return(n=SYSCALLS.get())<0?-28:FS.open(o.path,o.flags,0,n).fd;case 1:case 2:return 0;case 3:return o.flags;case 4:var n=SYSCALLS.get();return o.flags|=n,0;case 12:n=SYSCALLS.get();return HEAP16[n+0>>1]=2,0;case 13:case 14:return 0;case 16:case 8:return-28;case 9:return setErrNo(28),-1;default:return-28}}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}}function ___sys_open(e,t,r){SYSCALLS.varargs=r;try{var o=SYSCALLS.getStr(e),n=r?SYSCALLS.get():0;return FS.open(o,t,n).fd}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),-e.errno}}function _abort(){abort()}function _clock(){return void 0===_clock.start&&(_clock.start=Date.now()),1e3*(Date.now()-_clock.start)|0}function _emscripten_memcpy_big(e,t,r){HEAPU8.copyWithin(e,t,t+r)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(t){try{return wasmMemory.grow(t-buffer.byteLength+65535>>>16),updateGlobalBufferAndViews(wasmMemory.buffer),1}catch(e){void 0}}function _emscripten_resize_heap(e){e>>>=0;var t=_emscripten_get_heap_size(),r=(assert(t<e),2147483648);if(r<e)err("Cannot enlarge memory, asked to go up to "+e+" bytes, but the limit is "+r+" bytes!");else{for(var o=1;o<=4;o*=2){var n=t*(1+.2/o),n=Math.min(n,e+100663296),a=Math.min(r,alignUp(Math.max(16777216,e,n),65536));if(emscripten_realloc_buffer(a))return!0}err("Failed to grow the heap from "+t+" bytes to "+a+" bytes, not enough memory!")}return!1}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:getExecutableName()};for(t in ENV)e[t]=ENV[t];var t,r=[];for(t in e)r.push(t+"="+e[t]);getEnvStrings.strings=r}return getEnvStrings.strings}function _environ_get(o,n){try{var a=0;return getEnvStrings().forEach(function(e,t){var r=n+a;writeAsciiToMemory(e,HEAP32[o+4*t>>2]=r),a+=e.length+1}),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _environ_sizes_get(e,t){try{var r=getEnvStrings(),o=(HEAP32[e>>2]=r.length,0);return r.forEach(function(e){o+=e.length+1}),HEAP32[t>>2]=o,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_close(e){try{var t=SYSCALLS.getStreamFromFD(e);return FS.close(t),0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_fdstat_get(e,t){try{var r=SYSCALLS.getStreamFromFD(e),o=r.tty?2:FS.isDir(r.mode)?3:FS.isLink(r.mode)?7:4;return HEAP8[t>>0]=o,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_read(e,t,r,o){try{var n=SYSCALLS.getStreamFromFD(e),a=SYSCALLS.doReadv(n,t,r);return HEAP32[o>>2]=a,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_seek(e,t,r,o,n){try{var a=SYSCALLS.getStreamFromFD(e),i=4294967296*r+(t>>>0),s=9007199254740992;return i<=-s||s<=i?-61:(FS.llseek(a,i,o),tempI64=[a.position>>>0,(tempDouble=a.position,1<=+Math.abs(tempDouble)?0<tempDouble?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[n>>2]=tempI64[0],HEAP32[n+4>>2]=tempI64[1],a.getdents&&0==i&&0===o&&(a.getdents=null),0)}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _fd_write(e,t,r,o){try{var n=SYSCALLS.getStreamFromFD(e),a=SYSCALLS.doWritev(n,t,r);return HEAP32[o>>2]=a,0}catch(e){return void 0!==FS&&e instanceof FS.ErrnoError||abort(e),e.errno}}function _gettimeofday(e){var t=Date.now();return HEAP32[e>>2]=t/1e3|0,HEAP32[e+4>>2]=t%1e3*1e3|0,0}function _gmtime_r(e,t){var e=new Date(1e3*HEAP32[e>>2]),r=(HEAP32[t>>2]=e.getUTCSeconds(),HEAP32[t+4>>2]=e.getUTCMinutes(),HEAP32[t+8>>2]=e.getUTCHours(),HEAP32[t+12>>2]=e.getUTCDate(),HEAP32[t+16>>2]=e.getUTCMonth(),HEAP32[t+20>>2]=e.getUTCFullYear()-1900,HEAP32[t+24>>2]=e.getUTCDay(),HEAP32[t+36>>2]=0,HEAP32[t+32>>2]=0,Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0)),e=(e.getTime()-r)/864e5|0;return HEAP32[t+28>>2]=e,_gmtime_r.GMTString||(_gmtime_r.GMTString=allocateUTF8("GMT")),HEAP32[t+40>>2]=_gmtime_r.GMTString,t}function _tzset(){var e,t,r,o,n;function a(e){e=e.toTimeString().match(/\(([A-Za-z ]+)\)$/);return e?e[1]:"GMT"}_tzset.called||(_tzset.called=!0,o=(new Date).getFullYear(),r=new Date(o,0,1),o=new Date(o,6,1),e=r.getTimezoneOffset(),t=o.getTimezoneOffset(),n=Math.max(e,t),HEAP32[__get_timezone()>>2]=60*n,HEAP32[__get_daylight()>>2]=Number(e!=t),n=a(r),r=a(o),o=allocateUTF8(n),n=allocateUTF8(r),t<e?(HEAP32[__get_tzname()>>2]=o,HEAP32[__get_tzname()+4>>2]=n):(HEAP32[__get_tzname()>>2]=n,HEAP32[__get_tzname()+4>>2]=o))}function _localtime_r(e,t){_tzset();var e=new Date(1e3*HEAP32[e>>2]),r=(HEAP32[t>>2]=e.getSeconds(),HEAP32[t+4>>2]=e.getMinutes(),HEAP32[t+8>>2]=e.getHours(),HEAP32[t+12>>2]=e.getDate(),HEAP32[t+16>>2]=e.getMonth(),HEAP32[t+20>>2]=e.getFullYear()-1900,HEAP32[t+24>>2]=e.getDay(),new Date(e.getFullYear(),0,1)),o=(e.getTime()-r.getTime())/864e5|0,o=(HEAP32[t+28>>2]=o,HEAP32[t+36>>2]=-60*e.getTimezoneOffset(),new Date(e.getFullYear(),6,1).getTimezoneOffset()),r=r.getTimezoneOffset(),e=0|(o!=r&&e.getTimezoneOffset()==Math.min(r,o)),r=(HEAP32[t+32>>2]=e,HEAP32[__get_tzname()+(e?4:0)>>2]);return HEAP32[t+40>>2]=r,t}function _mktime(e){_tzset();var t=new Date(HEAP32[e+20>>2]+1900,HEAP32[e+16>>2],HEAP32[e+12>>2],HEAP32[e+8>>2],HEAP32[e+4>>2],HEAP32[e>>2],0),r=HEAP32[e+32>>2],o=t.getTimezoneOffset(),n=new Date(t.getFullYear(),0,1),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=n.getTimezoneOffset(),s=Math.min(i,a),r=(r<0?HEAP32[e+32>>2]=Number(a!=i&&s==o):0<r!=(s==o)&&(i=Math.max(i,a),a=0<r?s:i,t.setTime(t.getTime()+6e4*(a-o))),HEAP32[e+24>>2]=t.getDay(),(t.getTime()-n.getTime())/864e5|0);return HEAP32[e+28>>2]=r,HEAP32[e>>2]=t.getSeconds(),HEAP32[e+4>>2]=t.getMinutes(),HEAP32[e+8>>2]=t.getHours(),HEAP32[e+12>>2]=t.getDate(),HEAP32[e+16>>2]=t.getMonth(),t.getTime()/1e3|0}function _setTempRet0(e){setTempRet0(0|e)}var FSNode=function(e,t,r,o){this.parent=e=e||this,this.mount=e.mount,this.mounted=null,this.id=FS.nextInode++,this.name=t,this.mode=r,this.node_ops={},this.stream_ops={},this.rdev=o},readMode=365,writeMode=146,ASSERTIONS=(Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(e){e?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(e){e?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}}),FS.FSNode=FSNode,FS.staticInit(),!0);function intArrayFromString(e,t,r){r=0<r?r:lengthBytesUTF8(e)+1,r=new Array(r),e=stringToUTF8Array(e,r,0,r.length);return t&&(r.length=e),r}__ATINIT__.push({func:function(){___wasm_call_ctors()}});var calledRun,asmLibraryArg={__sys_fcntl64:___sys_fcntl64,__sys_open:___sys_open,abort:_abort,clock:_clock,emscripten_memcpy_big:_emscripten_memcpy_big,emscripten_resize_heap:_emscripten_resize_heap,environ_get:_environ_get,environ_sizes_get:_environ_sizes_get,fd_close:_fd_close,fd_fdstat_get:_fd_fdstat_get,fd_read:_fd_read,fd_seek:_fd_seek,fd_write:_fd_write,gettimeofday:_gettimeofday,gmtime_r:_gmtime_r,localtime_r:_localtime_r,mktime:_mktime,setTempRet0:_setTempRet0},asm=createWasm(),___wasm_call_ctors=Module.___wasm_call_ctors=createExportWrapper("__wasm_call_ctors"),_swr_alloc=Module._swr_alloc=createExportWrapper("swr_alloc"),_swr_alloc_set_opts=Module._swr_alloc_set_opts=createExportWrapper("swr_alloc_set_opts"),_getVideoWidth=Module._getVideoWidth=createExportWrapper("getVideoWidth"),_getVideoHeight=Module._getVideoHeight=createExportWrapper("getVideoHeight"),_free=Module._free=createExportWrapper("free"),_memset=Module._memset=createExportWrapper("memset"),_malloc=Module._malloc=createExportWrapper("malloc"),___errno_location=Module.___errno_location=createExportWrapper("__errno_location"),_openDecoder=Module._openDecoder=createExportWrapper("openDecoder"),_feedAudio=Module._feedAudio=createExportWrapper("feedAudio"),_feedData=Module._feedData=createExportWrapper("feedData"),_closeDecoder=Module._closeDecoder=createExportWrapper("closeDecoder"),_fflush=Module._fflush=createExportWrapper("fflush"),__get_tzname=Module.__get_tzname=createExportWrapper("_get_tzname"),__get_daylight=Module.__get_daylight=createExportWrapper("_get_daylight"),__get_timezone=Module.__get_timezone=createExportWrapper("_get_timezone"),stackSave=Module.stackSave=createExportWrapper("stackSave"),stackRestore=Module.stackRestore=createExportWrapper("stackRestore"),stackAlloc=Module.stackAlloc=createExportWrapper("stackAlloc"),_emscripten_stack_init=Module._emscripten_stack_init=function(){return(_emscripten_stack_init=Module._emscripten_stack_init=Module.asm.emscripten_stack_init).apply(null,arguments)},_emscripten_stack_get_free=Module._emscripten_stack_get_free=function(){return(_emscripten_stack_get_free=Module._emscripten_stack_get_free=Module.asm.emscripten_stack_get_free).apply(null,arguments)},_emscripten_stack_get_end=Module._emscripten_stack_get_end=function(){return(_emscripten_stack_get_end=Module._emscripten_stack_get_end=Module.asm.emscripten_stack_get_end).apply(null,arguments)},_memalign=Module._memalign=createExportWrapper("memalign"),dynCall_viiijj=Module.dynCall_viiijj=createExportWrapper("dynCall_viiijj"),dynCall_jij=Module.dynCall_jij=createExportWrapper("dynCall_jij"),dynCall_jii=Module.dynCall_jii=createExportWrapper("dynCall_jii"),dynCall_jiji=Module.dynCall_jiji=createExportWrapper("dynCall_jiji"),_ff_h264_cabac_tables=Module._ff_h264_cabac_tables=104805;function ExitStatus(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function run(e){function t(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT||(initRuntime(),preMain(),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),assert(!Module._main,'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'),postRun()))}0<runDependencies||(_emscripten_stack_init(),writeStackCookie(),preRun(),0<runDependencies||(Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1),t()},1)):t(),checkStackCookie()))}function checkUnflushedContent(){var e=out,t=err,r=!1;out=err=function(e){r=!0};try{var o=Module._fflush;o&&o(0),["stdout","stderr"].forEach(function(e){var e=FS.analyzePath("/dev/"+e);e&&(e=e.object.rdev,(e=TTY.ttys[e])&&e.output&&e.output.length&&(r=!0))})}catch(e){}out=e,err=t,r&&warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.")}if(Object.getOwnPropertyDescriptor(Module,"intArrayFromString")||(Module.intArrayFromString=function(){abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"intArrayToString")||(Module.intArrayToString=function(){abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ccall")||(Module.ccall=function(){abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"cwrap")||(Module.cwrap=function(){abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"setValue")||(Module.setValue=function(){abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getValue")||(Module.getValue=function(){abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"allocate")||(Module.allocate=function(){abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"UTF8ArrayToString")||(Module.UTF8ArrayToString=function(){abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"UTF8ToString")||(Module.UTF8ToString=function(){abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToUTF8Array")||(Module.stringToUTF8Array=function(){abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToUTF8")||(Module.stringToUTF8=function(){abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF8")||(Module.lengthBytesUTF8=function(){abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stackTrace")||(Module.stackTrace=function(){abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addOnPreRun")||(Module.addOnPreRun=function(){abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addOnInit")||(Module.addOnInit=function(){abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addOnPreMain")||(Module.addOnPreMain=function(){abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addOnExit")||(Module.addOnExit=function(){abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addOnPostRun")||(Module.addOnPostRun=function(){abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeStringToMemory")||(Module.writeStringToMemory=function(){abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeArrayToMemory")||(Module.writeArrayToMemory=function(){abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeAsciiToMemory")||(Module.writeAsciiToMemory=function(){abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addRunDependency")||(Module.addRunDependency=function(){abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"removeRunDependency")||(Module.removeRunDependency=function(){abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_createFolder")||(Module.FS_createFolder=function(){abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"FS_createPath")||(Module.FS_createPath=function(){abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_createDataFile")||(Module.FS_createDataFile=function(){abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_createPreloadedFile")||(Module.FS_createPreloadedFile=function(){abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_createLazyFile")||(Module.FS_createLazyFile=function(){abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_createLink")||(Module.FS_createLink=function(){abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"FS_createDevice")||(Module.FS_createDevice=function(){abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"FS_unlink")||(Module.FS_unlink=function(){abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(Module,"getLEB")||(Module.getLEB=function(){abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getFunctionTables")||(Module.getFunctionTables=function(){abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"alignFunctionTables")||(Module.alignFunctionTables=function(){abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"registerFunctions")||(Module.registerFunctions=function(){abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"addFunction")||(Module.addFunction=function(){abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"removeFunction")||(Module.removeFunction=function(){abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getFuncWrapper")||(Module.getFuncWrapper=function(){abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"prettyPrint")||(Module.prettyPrint=function(){abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"makeBigInt")||(Module.makeBigInt=function(){abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"dynCall")||(Module.dynCall=function(){abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getCompilerSetting")||(Module.getCompilerSetting=function(){abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"print")||(Module.print=function(){abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"printErr")||(Module.printErr=function(){abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getTempRet0")||(Module.getTempRet0=function(){abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"setTempRet0")||(Module.setTempRet0=function(){abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"callMain")||(Module.callMain=function(){abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"abort")||(Module.abort=function(){abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToNewUTF8")||(Module.stringToNewUTF8=function(){abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"setFileTime")||(Module.setFileTime=function(){abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"emscripten_realloc_buffer")||(Module.emscripten_realloc_buffer=function(){abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ENV")||(Module.ENV=function(){abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ERRNO_CODES")||(Module.ERRNO_CODES=function(){abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ERRNO_MESSAGES")||(Module.ERRNO_MESSAGES=function(){abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"setErrNo")||(Module.setErrNo=function(){abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"DNS")||(Module.DNS=function(){abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getHostByName")||(Module.getHostByName=function(){abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GAI_ERRNO_MESSAGES")||(Module.GAI_ERRNO_MESSAGES=function(){abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"Protocols")||(Module.Protocols=function(){abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"Sockets")||(Module.Sockets=function(){abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getRandomDevice")||(Module.getRandomDevice=function(){abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"traverseStack")||(Module.traverseStack=function(){abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"UNWIND_CACHE")||(Module.UNWIND_CACHE=function(){abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"withBuiltinMalloc")||(Module.withBuiltinMalloc=function(){abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"readAsmConstArgsArray")||(Module.readAsmConstArgsArray=function(){abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"readAsmConstArgs")||(Module.readAsmConstArgs=function(){abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"mainThreadEM_ASM")||(Module.mainThreadEM_ASM=function(){abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"jstoi_q")||(Module.jstoi_q=function(){abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"jstoi_s")||(Module.jstoi_s=function(){abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getExecutableName")||(Module.getExecutableName=function(){abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"listenOnce")||(Module.listenOnce=function(){abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"autoResumeAudioContext")||(Module.autoResumeAudioContext=function(){abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"dynCallLegacy")||(Module.dynCallLegacy=function(){abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getDynCaller")||(Module.getDynCaller=function(){abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"dynCall")||(Module.dynCall=function(){abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"callRuntimeCallbacks")||(Module.callRuntimeCallbacks=function(){abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"abortStackOverflow")||(Module.abortStackOverflow=function(){abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"reallyNegative")||(Module.reallyNegative=function(){abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"unSign")||(Module.unSign=function(){abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"reSign")||(Module.reSign=function(){abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"formatString")||(Module.formatString=function(){abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"PATH")||(Module.PATH=function(){abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"PATH_FS")||(Module.PATH_FS=function(){abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SYSCALLS")||(Module.SYSCALLS=function(){abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"syscallMmap2")||(Module.syscallMmap2=function(){abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"syscallMunmap")||(Module.syscallMunmap=function(){abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"JSEvents")||(Module.JSEvents=function(){abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"specialHTMLTargets")||(Module.specialHTMLTargets=function(){abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"maybeCStringToJsString")||(Module.maybeCStringToJsString=function(){abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"findEventTarget")||(Module.findEventTarget=function(){abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"findCanvasEventTarget")||(Module.findCanvasEventTarget=function(){abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"polyfillSetImmediate")||(Module.polyfillSetImmediate=function(){abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"demangle")||(Module.demangle=function(){abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"demangleAll")||(Module.demangleAll=function(){abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"jsStackTrace")||(Module.jsStackTrace=function(){abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stackTrace")||(Module.stackTrace=function(){abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getEnvStrings")||(Module.getEnvStrings=function(){abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"checkWasiClock")||(Module.checkWasiClock=function(){abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeI53ToI64")||(Module.writeI53ToI64=function(){abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeI53ToI64Clamped")||(Module.writeI53ToI64Clamped=function(){abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeI53ToI64Signaling")||(Module.writeI53ToI64Signaling=function(){abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeI53ToU64Clamped")||(Module.writeI53ToU64Clamped=function(){abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeI53ToU64Signaling")||(Module.writeI53ToU64Signaling=function(){abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"readI53FromI64")||(Module.readI53FromI64=function(){abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"readI53FromU64")||(Module.readI53FromU64=function(){abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"convertI32PairToI53")||(Module.convertI32PairToI53=function(){abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"convertU32PairToI53")||(Module.convertU32PairToI53=function(){abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"uncaughtExceptionCount")||(Module.uncaughtExceptionCount=function(){abort("'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"exceptionLast")||(Module.exceptionLast=function(){abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"exceptionCaught")||(Module.exceptionCaught=function(){abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ExceptionInfoAttrs")||(Module.ExceptionInfoAttrs=function(){abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"ExceptionInfo")||(Module.ExceptionInfo=function(){abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"CatchInfo")||(Module.CatchInfo=function(){abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"exception_addRef")||(Module.exception_addRef=function(){abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"exception_decRef")||(Module.exception_decRef=function(){abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"Browser")||(Module.Browser=function(){abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"funcWrappers")||(Module.funcWrappers=function(){abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"getFuncWrapper")||(Module.getFuncWrapper=function(){abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"setMainLoop")||(Module.setMainLoop=function(){abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"FS")||(Module.FS=function(){abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"mmapAlloc")||(Module.mmapAlloc=function(){abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"MEMFS")||(Module.MEMFS=function(){abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"TTY")||(Module.TTY=function(){abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"PIPEFS")||(Module.PIPEFS=function(){abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SOCKFS")||(Module.SOCKFS=function(){abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"tempFixedLengthArray")||(Module.tempFixedLengthArray=function(){abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"miniTempWebGLFloatBuffers")||(Module.miniTempWebGLFloatBuffers=function(){abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"heapObjectForWebGLType")||(Module.heapObjectForWebGLType=function(){abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"heapAccessShiftForWebGLHeap")||(Module.heapAccessShiftForWebGLHeap=function(){abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GL")||(Module.GL=function(){abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"emscriptenWebGLGet")||(Module.emscriptenWebGLGet=function(){abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"computeUnpackAlignedImageSize")||(Module.computeUnpackAlignedImageSize=function(){abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"emscriptenWebGLGetTexPixelData")||(Module.emscriptenWebGLGetTexPixelData=function(){abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"emscriptenWebGLGetUniform")||(Module.emscriptenWebGLGetUniform=function(){abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"emscriptenWebGLGetVertexAttrib")||(Module.emscriptenWebGLGetVertexAttrib=function(){abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"writeGLArray")||(Module.writeGLArray=function(){abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"AL")||(Module.AL=function(){abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SDL_unicode")||(Module.SDL_unicode=function(){abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SDL_ttfContext")||(Module.SDL_ttfContext=function(){abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SDL_audio")||(Module.SDL_audio=function(){abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SDL")||(Module.SDL=function(){abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"SDL_gfx")||(Module.SDL_gfx=function(){abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GLUT")||(Module.GLUT=function(){abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"EGL")||(Module.EGL=function(){abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GLFW_Window")||(Module.GLFW_Window=function(){abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GLFW")||(Module.GLFW=function(){abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"GLEW")||(Module.GLEW=function(){abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"IDBStore")||(Module.IDBStore=function(){abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"runAndAbortIfError")||(Module.runAndAbortIfError=function(){abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"warnOnce")||(Module.warnOnce=function(){abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stackSave")||(Module.stackSave=function(){abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stackRestore")||(Module.stackRestore=function(){abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stackAlloc")||(Module.stackAlloc=function(){abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"AsciiToString")||(Module.AsciiToString=function(){abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToAscii")||(Module.stringToAscii=function(){abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"UTF16ToString")||(Module.UTF16ToString=function(){abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToUTF16")||(Module.stringToUTF16=function(){abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF16")||(Module.lengthBytesUTF16=function(){abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"UTF32ToString")||(Module.UTF32ToString=function(){abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"stringToUTF32")||(Module.stringToUTF32=function(){abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"lengthBytesUTF32")||(Module.lengthBytesUTF32=function(){abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"allocateUTF8")||(Module.allocateUTF8=function(){abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(Module,"allocateUTF8OnStack")||(Module.allocateUTF8OnStack=function(){abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Module.writeStackCookie=writeStackCookie,Module.checkStackCookie=checkStackCookie,Object.getOwnPropertyDescriptor(Module,"ALLOC_NORMAL")||Object.defineProperty(Module,"ALLOC_NORMAL",{configurable:!0,get:function(){abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(Module,"ALLOC_STACK")||Object.defineProperty(Module,"ALLOC_STACK",{configurable:!0,get:function(){abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),dependenciesFulfilled=function e(){calledRun||run(),calledRun||(dependenciesFulfilled=e)},Module.run=run,Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();noExitRuntime=!0,run();
var golbalYuvData,isFinish=!1,h264Queue=[],decodeCount=1,maxWidth=1080,maxHeight=1920,globalYuvPtr=void 0,renderCount=0,curFrameWidth=void 0,curFrameHeight=void 0;let fpsCount=0,isFeed=!0,decodeSuccessCount=0,lastTime=(new Date).getTime(),lastRequestTime=0,decodeCostSum=0;function doSomeInit(){golbalYuvData=new Uint8Array(maxWidth*maxHeight*3/2),void 0}function doRequestIFrame(){self.postMessage({cmd:5}),lastRequestTime=(new Date).getTime()}function printWorkerLog(e){self.postMessage({cmd:0,data:e})}function decodeVideo(){let e;if(0<h264Queue.length&&isFinish){if(25<=h264Queue.length&&isFinish){for(isFeed=!1,printWorkerLog("解不过来"+h264Queue.length);0<h264Queue.length;)h264Queue.shift();doRequestIFrame(),printWorkerLog("重新请求I帧")}else{var t=31&(e=h264Queue.shift())[4];5!=t&&7!=t&&8!=t||(isFeed=isFeed||!0)}isFeed&&(t=(new Date).getTime(),decodeH264(e),t=(new Date).getTime()-t,decodeCostSum+=t,100==++decodeSuccessCount&&(printWorkerLog("解码平均耗时:"+(t=decodeCostSum/decodeSuccessCount)+"ms，解码fps:"+1e3/t),decodeCostSum=0,decodeSuccessCount=0))}}void 0,self.Module.onRuntimeInitialized=function(){isFinish=!0,doSomeInit(),void 0,Module._openDecoder()||void 0},self.addEventListener("message",function(e){var t,o=e.data;"rawData"==o.type&&255!=(e=e.data.data)[0]&&(fpsCount++,1e3<=(new Date).getTime()-lastTime&&(lastTime=(new Date).getTime(),printWorkerLog("网络 fps:"+fpsCount),fpsCount=0),7==(31&e[4])&&(t=spsParser(e),null==curFrameWidth||null==curFrameHeight||t.width==curFrameWidth&&t.height==curFrameHeight||switchNewStream(),curFrameWidth=t.width,curFrameHeight=t.height),h264Queue.push(e)),"close"==o.type&&closeDecoder(),o.type},!1);var timeFlag=setInterval(decodeVideo,1);function dispatchYuvData(t,o,e,l,u,d){for(let e=0;e<u;e++)t[e]=Module.HEAPU8[o+e];e={cmd:1,data:t,time:(new Date).getTime(),width:e,height:l};Module._free(d),self.postMessage(e)}function decodeH264(t){var e=0,o=0,l=Module._malloc(t.length);for(let e=0;e<t.length;e++)Module.HEAPU8[l+e]=t[e];var u=(new Date).getTime();null==globalYuvPtr&&(globalYuvPtr=Module._malloc(maxWidth*maxHeight*3/2)),0<=Module._feedData(l,t.length,globalYuvPtr)?(e=Module._getVideoWidth(),o=Module._getVideoHeight(),(new Date).getTime(),1<renderCount?dispatchYuvData(golbalYuvData,globalYuvPtr,e,o,e*o*3/2,l):renderCount++):Module._free(l)}function switchNewStream(){closeDecoder();Module._openDecoder(),setInterval(decodeVideo,1);void 0}function closeDecoder(){for(void 0,clearInterval(timeFlag),Module._closeDecoder(),renderCount=0,null!=globalYuvPtr&&(Module._free(globalYuvPtr),globalYuvPtr=void 0),void 0;0<h264Queue.lengh;)h264Queue.shift()}null==self.Module?void 0:void 0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,